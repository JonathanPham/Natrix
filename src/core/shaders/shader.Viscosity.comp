
#version 430

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

uvec2 _Size;

layout(std430) buffer xst__VelocityIn
{
    vec2 _VelocityIn[];
};

layout(std430) buffer xst__VelocityOut
{
    vec2 _VelocityOut[];
};

uvec4 GetNeighbours(ivec2 pos, ivec2 size)
{
    uvec4 result;
    const int maxX = size.x - 1;
    const int maxY = size.y - 1;
    result.x = uint(pos.y) * _Size.x + uint(clamp(pos.x - 1, 0, maxX));
    result.y = uint(pos.y) * _Size.x + uint(clamp(pos.x + 1, 0, maxX));
    result.z = uint(clamp(pos.y - 1, 0, maxY) * size.x + pos.x);
    result.w = uint(clamp(pos.y + 1, 0, maxY) * size.x + pos.x);
    return result;
}

uniform float _Alpha;

uniform float _rBeta;

void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    const uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    const uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    const vec2 x1 = _VelocityIn[n.x];
    const vec2 x2 = _VelocityIn[n.y];
    const vec2 y1 = _VelocityIn[n.z];
    const vec2 y2 = _VelocityIn[n.w];
    const vec2 b = _VelocityIn[pos];
    _VelocityOut[pos] = (x1 + x2 + y1 + y2 + b * _Alpha) * _rBeta;
}

