
#version 430

layout(local_size_x = {% NUM_THREADS %}, local_size_y = {% NUM_THREADS %}, local_size_z = 1) in;

uniform uvec2 _Size;

layout(std430, binding={% VELOCITY_IN %}) buffer xst__VelocityIn
{
    vec2 _VelocityIn[];
};

layout(std430, binding={% VELOCITY_OUT %}) buffer xst__VelocityOut
{
    vec2 _VelocityOut[];
};

layout(std430, binding={% VORTICITY %}) buffer xst__Vorticity
{
    float _Vorticity[];
};

uniform float _ElapsedTime;

uniform float _VorticityScale;

{% include 'tmpl.GetNeighbours.comp' %}

void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    float vL = _Vorticity[n.x];
    float vR = _Vorticity[n.y];
    float vB = _Vorticity[n.z];
    float vT = _Vorticity[n.w];
    float vC = _Vorticity[pos];
    vec2 force = 0.5f * vec2(abs(vT) - abs(vB), abs(vR) - abs(vL));
    float EPSILON = 2.4414e-4f;
    float magSqr = max(EPSILON, dot(force, force));
    force = force * inversesqrt(magSqr);
    force *= _VorticityScale * vC * vec2(1, -1);
    vec2 final_force = force * _ElapsedTime;
    _VelocityOut[pos] = _VelocityIn[pos] + vec2(final_force.x, final_force.y);
}

