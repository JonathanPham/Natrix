
#version 430

layout(local_size_x = {% NUM_THREADS %}, local_size_y = {% NUM_THREADS %}, local_size_z = 1) in;

uniform uvec2 _Size;

layout(std430, binding={% VELOCITY_IN %}) buffer xst__VelocityIn
{
    vec2 _VelocityIn[];
};

layout(std430, binding={% OBSTACLES %}) buffer xst__Obstacles
{
    vec2 _Obstacles[];
};

layout(std430, bindings={% DIVERGENCE %}) buffer xst__Divergence
{
    float _Divergence[];
};

{% include 'tmpl.GetNeighbours.comp' %}

void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    const uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    const uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    float x1 = _VelocityIn[n.x].x;
    float x2 = _VelocityIn[n.y].x;
    float y1 = _VelocityIn[n.z].y;
    float y2 = _VelocityIn[n.w].y;
    const vec2 obsL = _Obstacles[n.x];
    const vec2 obsR = _Obstacles[n.y];
    const vec2 obsB = _Obstacles[n.z];
    const vec2 obsT = _Obstacles[n.w];
    if (obsL.x > 0.0f || obsL.y > 0.0f)
        x1 = 0.0f;
    if (obsR.x > 0.0f || obsR.y > 0.0f)
        x2 = 0.0f;
    if (obsB.x > 0.0f || obsB.y > 0.0f)
        y1 = 0.0f;
    if (obsT.x > 0.0f || obsT.y > 0.0f)
        y2 = 0.0f;
    _Divergence[pos] = 0.5f * ((x2 - x1) + (y2 - y1));
}

