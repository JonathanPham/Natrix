
#version 430

layout(local_size_x = {% NUM_THREADS %}, local_size_y = {% NUM_THREADS %}, local_size_z = 1) in;

uniform vec2 _Size;

layout(std430, binding={% VELOCITY_IN %}) buffer xst__VelocityIn
{
    vec2 _VelocityIn[];
};

layout(std430, binding={% VELOCITY_OUT %}) buffer xst__VelocityOut
{
    vec2 _VelocityOut[];
};

uniform float _Radius;

uniform vec2 _Position;

uniform vec2 _Value;

void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    const uint pos = gl_GlobalInvocationID.y * uint(_Size.x) + gl_GlobalInvocationID.x;
    const vec2 splat_pos = _Position * vec2(_Size);
    const vec2 val = _VelocityIn[pos];
    vec2 result = val;
    float len = distance(splat_pos, vec2(gl_GlobalInvocationID));
    if (len <= _Radius)
    {
        result = val + _Value * (_Radius - len) / _Radius;
    }
    _VelocityOut[pos] = clamp(result, vec2(-1.0, -1.0), vec2(1.0, 1.0));
}

