
#version 430

layout(local_size_x = {% NUM_THREADS %}, local_size_y = {% NUM_THREADS %}, local_size_z = 1) in;

uniform uvec2 _Size;

layout(std430, binding={% VELOCITY_IN %}) buffer xst__VelocityIn
{
    vec2 _VelocityIn[];
};

layout(std430, binding={% VELOCITY_OUT %}) buffer xst__VelocityOut
{
    vec2 _VelocityOut[];
};

layout(std430, binding={% OBSTACLES %}) buffer xst__Obstacles
{
    vec2 _Obstacles[];
};

layout(std430, binding={% PRESSURE_IN %}) buffer xst__PressureIn
{
    float _PressureIn[];
};

{% include 'tmpl.GetNeighbours.comp' %}

void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    const uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    const uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    float x1 = _PressureIn[n.x];
    float x2 = _PressureIn[n.y];
    float y1 = _PressureIn[n.z];
    float y2 = _PressureIn[n.w];
    float p = _PressureIn[pos];
    const vec2 obsL = _Obstacles[n.x];
    const vec2 obsR = _Obstacles[n.y];
    const vec2 obsB = _Obstacles[n.z];
    const vec2 obsT = _Obstacles[n.w];
    if (obsL.x > 0.0f || obsL.y > 0.0f)
        x1 = p;
    if (obsR.x > 0.0f || obsR.y > 0.0f)
        x2 = p;
    if (obsB.x > 0.0f || obsB.y > 0.0f)
        y1 = p;
    if (obsT.x > 0.0f || obsT.y > 0.0f)
        y2 = p;
    vec2 velocity = _VelocityIn[pos];
    velocity.x -= 0.5f * (x2 - x1);
    velocity.y -= 0.5f * (y2 - y1);
    _VelocityOut[pos] = velocity;
}

