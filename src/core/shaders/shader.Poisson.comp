
#version 430

layout(local_size_x = {{ NUM_THREADS }}, local_size_y = {{ NUM_THREADS }}, local_size_z = 1) in;

uniform uvec2 _Size;

layout(std430, binding={{ OBSTACLES }}) buffer xst__Obstacles
{
    vec2 _Obstacles[];
};

layout(std430, binding={{ DIVERGENCE }}) buffer xst__Divergence
{
    float _Divergence[];
};

layout(std430, binding={{ PRESSURE_IN }}) buffer xst__PressureIn
{
    float _PressureIn[];
};

layout(std430, binding={{ PRESSURE_OUT }}) buffer xst__PressureOut
{
    float _PressureOut[];
};

{% include 'tmpl.GetNeighbours.comp' %}

void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    const uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    const float rbeta = 0.25f;
    const uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    float p = _PressureIn[pos];
    const vec2 obsL = _Obstacles[n.x];
    const vec2 obsR = _Obstacles[n.y];
    const vec2 obsB = _Obstacles[n.z];
    const vec2 obsT = _Obstacles[n.w];
    const float x1 = (obsL.x > 0.0f || obsL.y > 0.0f) ? p : _PressureIn[n.x];
    const float x2 = (obsR.x > 0.0f || obsR.y > 0.0f) ? p : _PressureIn[n.y];
    const float y1 = (obsB.x > 0.0f || obsB.y > 0.0f) ? p : _PressureIn[n.z];
    const float y2 = (obsT.x > 0.0f || obsT.y > 0.0f) ? p : _PressureIn[n.w];
    const float b = _Divergence[pos];
    _PressureOut[pos] = (x1 + x2 + y1 + y2 - b) * rbeta;
}

