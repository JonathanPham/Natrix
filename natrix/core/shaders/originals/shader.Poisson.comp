
#include "bgfx_compute.sh"
#include "constants.sh"

uniform vec2 _Size;

BUFFER_RO(_Obstacles, vec2, 7);

BUFFER_RO(_Divergence, float, 6);

BUFFER_RO(_PressureIn, vec2, 3);

BUFFER_WR(_PressureOut, vec2, 4);

#include "common.sh"

NUM_THREADS(GROUP_SIZE, GROUP_SIZE, 1)
void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    float rbeta = 0.25f;
    uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    float p = _PressureIn[pos];
    vec2 obsL = _Obstacles[n.x];
    vec2 obsR = _Obstacles[n.y];
    vec2 obsB = _Obstacles[n.z];
    vec2 obsT = _Obstacles[n.w];
    float x1 = (obsL.x > 0.0f || obsL.y > 0.0f) ? p : _PressureIn[n.x];
    float x2 = (obsR.x > 0.0f || obsR.y > 0.0f) ? p : _PressureIn[n.y];
    float y1 = (obsB.x > 0.0f || obsB.y > 0.0f) ? p : _PressureIn[n.z];
    float y2 = (obsT.x > 0.0f || obsT.y > 0.0f) ? p : _PressureIn[n.w];
    float b = _Divergence[pos];
    _PressureOut[pos] = (x1 + x2 + y1 + y2 - b) * rbeta;
}

