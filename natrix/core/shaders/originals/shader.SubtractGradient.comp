
#include "bgfx_compute.sh"

uniform vec4 _Size;

BUFFER_RO(_VelocityIn, vec4, 0);

BUFFER_WR(_VelocityOut, vec4, 1);

BUFFER_RO(_Obstacles, vec4, 2);

BUFFER_RO(_PressureIn, vec4, 3);


uvec4 GetNeighbours(vec4 pos, vec4 size)
{
    uvec4 result;
    int maxX = size.x - 1;
    int maxY = size.y - 1;
    result.x = uint(pos.y) * _Size.x + uint(clamp(pos.x - 1, 0, maxX));
    result.y = uint(pos.y) * _Size.x + uint(clamp(pos.x + 1, 0, maxX));
    result.z = uint(clamp(pos.y - 1, 0, maxY) * size.x + pos.x);
    result.w = uint(clamp(pos.y + 1, 0, maxY) * size.x + pos.x);
    return result;
}

#define GROUP_SIZE 512

NUM_THREADS(GROUP_SIZE, 1, 1)
void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    uvec4 n = GetNeighbours(vec4(gl_GlobalInvocationID.xy, 0, 0), _Size);
    uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    vec4 x1 = _PressureIn[n.x];
    vec4 x2 = _PressureIn[n.y];
    vec4 y1 = _PressureIn[n.z];
    vec4 y2 = _PressureIn[n.w];
    vec4 p = _PressureIn[pos];
    vec4 obsL = _Obstacles[n.x];
    vec4 obsR = _Obstacles[n.y];
    vec4 obsB = _Obstacles[n.z];
    vec4 obsT = _Obstacles[n.w];
    if (obsL.x > 0.0f || obsL.y > 0.0f)
        x1 = p;
    if (obsR.x > 0.0f || obsR.y > 0.0f)
        x2 = p;
    if (obsB.x > 0.0f || obsB.y > 0.0f)
        y1 = p;
    if (obsT.x > 0.0f || obsT.y > 0.0f)
        y2 = p;
    vec4 velocity = _VelocityIn[pos];
    velocity.x -= 0.5f * (x2.x - x1.x);
    velocity.y -= 0.5f * (y2.x - y1.x);
    _VelocityOut[pos] = velocity;
}

