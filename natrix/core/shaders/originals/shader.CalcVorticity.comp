
#include "bgfx_compute.sh"
#include "constants.sh"

uniform vec2 _Size;

BUFFER_RO(_VelocityIn, vec2, 1);

BUFFER_WR(_Vorticity, float, 5);

#include "common.sh"

NUM_THREADS(GROUP_SIZE, GROUP_SIZE, 1)
void main()
{
    if (gl_GlobalInvocationID.x >= _Size.x || gl_GlobalInvocationID.y >= _Size.y)
    {
        return;
    }
    uint pos = gl_GlobalInvocationID.y * _Size.x + gl_GlobalInvocationID.x;
    uvec4 n = GetNeighbours(ivec2(gl_GlobalInvocationID.xy), ivec2(_Size));
    vec2 vL = _VelocityIn[n.x];
    vec2 vR = _VelocityIn[n.y];
    vec2 vB = _VelocityIn[n.z];
    vec2 vT = _VelocityIn[n.w];
    _Vorticity[pos] = 0.5f * ((vR.y - vL.y) - (vT.x - vB.x));
}

